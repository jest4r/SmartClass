{"version":3,"sources":["history.js","auth/FetchInterceptor.js","services/classes.js","components/shared-components/AvatarStatus/index.js","views/app-views/apps/export-class/index.js"],"names":["history","service","axios","create","baseURL","API_BASE_URL","timeout","ENTRY_ROUTE","interceptors","request","use","config","jwtToken","localStorage","getItem","AUTH_TOKEN","headers","push","window","location","reload","error","notification","message","Promise","reject","response","data","notificationParam","status","description","removeItem","classesService","id","get","concat","params","delete","post","file","formData","FormData","append","type","Error","responseType","ids","renderAvatar","props","_jsx","Avatar","className","children","text","AvatarStatus","name","suffix","subTitle","src","icon","size","shape","gap","onNameClick","_jsxs","onClick","Option","Select","ExportClass","classesData","setClassesData","useState","list","setList","loading","setLoading","fileType","setFileType","selectedRows","setSelectedRows","selectedRowKeys","setSelectedRowKeys","useEffect","async","getAll","console","fetchClasses","tableColumns","title","dataIndex","render","_","record","sorter","a","b","utils","antdTableSorter","rowSelection","onChange","keys","rows","_Fragment","Card","Flex","alignItems","justifyContent","defaultValue","style","width","value","placeholder","Button","handleExport","dataToExport","length","warning","result","exportAll","log","success","toUpperCase","url","open","mimeType","blob","Blob","URL","createObjectURL","document","createElement","href","download","Date","toISOString","split","body","appendChild","click","revokeObjectURL","remove","exportAllClasses","map","item","join","queryParams","URLSearchParams","downloadUrl","process","REACT_APP_API_BASE_URL","toString","exportClasses","marginLeft","disabled","Table","columns","dataSource","Array","isArray","rowKey"],"mappings":"iIAEeA,E,OAAAA,I,iBCIf,MAAMC,EAAUC,IAAMC,OAAO,CAC3BC,QAASC,IACTC,QAAS,MAILC,EAAc,cAKpBN,EAAQO,aAAaC,QAAQC,KAAIC,IAChC,MAAMC,EAAWC,aAAaC,QAAQC,KAWrC,OATIH,IACFD,EAAOK,QAAyB,cAAIJ,GAGjCA,GAAaD,EAAOK,QAVA,oBAWzBhB,EAAQiB,KAAKV,GACbW,OAAOC,SAASC,UAGTT,KACNU,IAEFC,IAAaD,MAAM,CAClBE,QAAS,UAETC,QAAQC,OAAOJ,MAIjBpB,EAAQO,aAAakB,SAAShB,KAAMgB,GAC5BA,EAASC,OACbN,IAEH,IAAIO,EAAoB,CACvBL,QAAS,IA6BV,OAzBIF,EAAMK,WAEqB,MAA1BL,EAAMK,SAASG,QAA4C,MAA1BR,EAAMK,SAASG,QAA4C,MAA1BR,EAAMK,SAASG,SACpFD,EAAkBL,QAAU,sBAC5BK,EAAkBE,YAAc,qBAChCjB,aAAakB,WAAWhB,KACxBf,EAAQiB,KAAKV,GACbW,OAAOC,SAASC,UAGa,MAA1BC,EAAMK,SAASG,SAClBD,EAAkBL,QAAU,aAGC,MAA1BF,EAAMK,SAASG,SAClBD,EAAkBL,QAAU,yBAGC,MAA1BF,EAAMK,SAASG,SAClBD,EAAkBL,QAAU,YAG7BD,IAAaD,MAAMO,IAGbJ,QAAQC,OAAOJ,MAGRpB,O,iCC5Ef,aAEA,MAAM+B,EAAiB,CAEvBA,QAAyB,SAAUC,GACjC,OAAOhC,IAAQiC,IAAI,YAADC,OAAaF,KAGjCD,OAAwB,SAAUI,GAChC,OAAOnC,IAAQiC,IAAI,WAAY,CAAEE,YAGnCJ,OAAwB,SAAUC,GAChC,OAAOhC,IAAQoC,OAAO,YAADF,OAAaF,KAGpCD,OAAwB,SAAUC,EAAIN,GACpC,OAAO1B,IAAQqC,KAAK,YAADH,OAAaF,GAAMN,IAGxCK,OAAwB,SAAUL,GAChC,OAAO1B,IAAQqC,KAAK,WAAYX,IAGlCK,KAAsB,SAAUC,GAC9B,OAAOhC,IAAQqC,KAAK,YAADH,OAAaF,EAAE,WAGpCD,OAAwB,SAAUO,GAChC,MAAMC,EAAW,IAAIC,SAErB,OADAD,EAASE,OAAO,aAAcH,GACvBtC,IAAQqC,KAAK,kBAAmBE,EAAU,CAC/CxB,QAAS,CACP,eAAgB,0BAKtBgB,UAA2B,SAAUW,GACnC,GAAa,SAATA,GAA4B,QAATA,EACrB,MAAM,IAAIC,MAAM,wCAGlB,OAAO3C,IAAQiC,IAAI,wBAADC,OAAyBQ,GAAQ,CACjDE,aAAc,UAKlBb,OAAwB,SAAUc,EAAKH,GACrC,GAAa,SAATA,GAA4B,QAATA,EACrB,MAAM,IAAIC,MAAM,wCAElB,OAAO3C,IAAQqC,KAAK,mBAADH,OAAoBQ,GAAQ,CAAEG,UAGpCd,O,iCCxDf,yBAIA,MAAMe,EAAeC,GACbC,cAACC,IAAM,IAAKF,EAAOG,UAAS,cAAAhB,OAAgBa,EAAML,MAAOS,SAAEJ,EAAMK,OAgC1DC,IA7BaN,IAC3B,MAAM,KAAEO,EAAI,OAAEC,EAAM,SAAEC,EAAQ,GAAExB,EAAE,KAAEU,EAAI,IAAEe,EAAG,KAAEC,EAAI,KAAEC,EAAI,MAAEC,EAAK,IAAEC,EAAG,KAAET,EAAI,YAAEU,GAAgBf,EAC7F,OACCgB,eAAA,OAAKb,UAAU,0CAAyCC,SAAA,CACtDL,EAAa,CAACY,OAAMD,MAAKf,OAAMiB,OAAMC,QAAOC,MAAKT,SAClDW,eAAA,OAAKb,UAAU,OAAMC,SAAA,CACpBY,eAAA,OAAAZ,SAAA,CAEEW,EACAd,cAAA,OAAKgB,QAASA,IAAMF,EAAY,CAACR,OAAME,WAAUC,MAAKzB,OAAMkB,UAAU,+BAA8BC,SAAEG,IAEtGN,cAAA,OAAKE,UAAU,qBAAoBC,SAAEG,IAEtCN,cAAA,QAAAG,SAAOI,OAERP,cAAA,OAAKE,UAAU,oCAAmCC,SAAEK,Y,iCCvBxD,wGAMA,MAAM,OAAES,GAAWC,IAqOJC,UAnOKA,KAEhB,MAAOC,EAAaC,GAAkBC,mBAAS,KACxCC,EAAMC,GAAWF,mBAAS,KAC1BG,EAASC,GAAcJ,oBAAS,IAChCK,EAAUC,GAAeN,mBAAS,SAClCO,EAAcC,GAAmBR,mBAAS,KAC1CS,EAAiBC,GAAsBV,mBAAS,IAGvDW,qBAAU,KACeC,WACjB,IACIR,GAAW,GACX,MAAMjD,QAAiBM,IAAeoD,SACtCd,EAAe5C,EAASC,MAAQ,IAClC,MAAON,GACLgE,QAAQhE,MAAM,0BAA2BA,GACzCE,IAAQF,MAAM,0BACdiD,EAAe,IAClB,QACGK,GAAW,KAGnBW,KACD,IAEHJ,qBAAU,KACNT,EAAQJ,KACT,CAACA,IAGJ,MA0GMkB,EAAe,CACjB,CACIC,MAAO,KACPC,UAAW,MAEf,CACID,MAAO,aACPC,UAAW,OACXC,OAAQA,CAACC,EAAGC,IACR3C,cAAA,OAAKE,UAAU,SAAQC,SACnBH,cAACK,IAAY,CAACM,KAAM,GAAIjB,KAAK,SAASe,IAAK,wBAAyBH,KAAMqC,EAAOrC,SAGzFsC,OAAQA,CAACC,EAAGC,IAAMC,IAAMC,gBAAgBH,EAAGC,EAAG,SAElD,CACIP,MAAO,OACPC,UAAW,OACXI,OAAQA,CAACC,EAAGC,IAAMC,IAAMC,gBAAgBH,EAAGC,EAAG,SAElD,CACIP,MAAO,cACPC,UAAW,cACXI,OAAQA,CAACC,EAAGC,IAAMC,IAAMC,gBAAgBH,EAAGC,EAAG,iBAKhDG,EAAe,CACjBC,SAAUA,CAACC,EAAMC,KACbpB,EAAmBmB,GACnBrB,EAAgBsB,KAKxB,OACIrC,eAAAsC,WAAA,CAAAlD,SAAA,CACIH,cAAA,OAAKE,UAAU,OAAMC,SACjBH,cAACsD,IAAI,CAAAnD,SACDY,eAACwC,IAAI,CAACC,WAAW,SAASC,eAAe,gBAAetD,SAAA,CACpDH,cAAA,MAAIE,UAAU,YAAWC,SAAC,mBAC1BY,eAACwC,IAAI,CAACE,eAAe,aAAYtD,SAAA,CAC7BY,eAACG,IAAM,CACHwC,aAAa,OACbC,MAAO,CAAEC,MAAO,KAChBC,MAAOlC,EACPuB,SAAWW,IACPjC,EAAYiC,IAEhBC,YAAY,mBAAkB3D,SAAA,CAE9BH,cAACiB,EAAM,CAAC4C,MAAM,OAAM1D,SAAC,kBACrBH,cAACiB,EAAM,CAAC4C,MAAM,MAAK1D,SAAC,kBAExBH,cAAC+D,IAAM,CACH/C,QAlKPgD,KACjB,IAAKrC,EAED,YADArD,IAAQF,MAAM,6BAKlB,MAAM6F,EAAepC,EAAaqC,OAAS,EAAIrC,EAAeN,EAE9D,GAA4B,IAAxB0C,EAAaC,OAEb,YADA5F,IAAQ6F,QAAQ,qBAKpB,GAA4B,IAAxBtC,EAAaqC,OAAc,CA+C3B,WA7CyBhC,WACrB,IACIR,GAAW,GACX,MAAM0C,QAAerF,IAAesF,UAAU1C,GAE9C,GADAS,QAAQkC,IAAI,wBAAyBF,GACjCA,EAIA,GAHA9F,IAAQiG,QAAQ,wCAADrF,OAAyCyC,EAAS6C,gBAG7DJ,EAAOK,IACPxG,OAAOyG,KAAKN,EAAOK,IAAK,cACrB,CACH,MAAME,EAAwB,SAAbhD,EACX,oEACA,WAEN,IAAIiD,EAGAA,EADAR,aAAkBS,KACXT,EACAA,EAAO1F,KACP,IAAImG,KAAK,CAACT,EAAO1F,MAAO,CAAEgB,KAAMiF,IAEhC,IAAIE,KAAK,CAACT,GAAS,CAAE1E,KAAMiF,IAGtC,MAAMF,EAAMxG,OAAO6G,IAAIC,gBAAgBH,GACjC/B,EAAImC,SAASC,cAAc,KACjCpC,EAAEqC,KAAOT,EACT5B,EAAEsC,SAAQ,sBAAAjG,QAAyB,IAAIkG,MAAOC,cAAcC,MAAM,KAAK,GAAE,KAAApG,OAAIyC,GAC7EqD,SAASO,KAAKC,YAAY3C,GAC1BA,EAAE4C,QACFxH,OAAO6G,IAAIY,gBAAgBjB,GAC3B5B,EAAE8C,UAGZ,MAAOvH,GACLgE,QAAQhE,MAAM,+BAAgCA,GAC9CE,IAAQF,MAAM,iCAADc,OAAkCd,EAAME,SAAW,kBACnE,QACGoD,GAAW,KAInBkE,GAIJlE,GAAW,GAEWQ,WAClB,IAEA,MAAM/C,EAAS,CACXU,IAAKoE,EAAa4B,KAAIC,GAAQA,EAAK9G,MAGvCoD,QAAQkC,IAAI,6BAADpF,OAA8ByC,EAAQ,aAAaxC,GAG9D,MAAMU,EAAMV,EAAOU,IAAIkG,KAAK,KAGtBC,EAAc,IAAIC,gBACxBD,EAAYvG,OAAO,MAAOI,GAC1BmG,EAAYvG,OAAO,OAAQkC,GAE3B,MAAMuE,EAAW,GAAAhH,OAAMiH,mIAAYC,wBAA0B,GAAE,wBAAAlH,OAAuB8G,EAAYK,YAGlGpI,OAAOyG,KAAKwB,EAAa,UACzB5H,IAAQiG,QAAQ,oCAADrF,OAAqCyC,EAAS6C,gBAG7D9C,GAAW,GAET,MAAOtD,GACTgE,QAAQhE,MAAM,2BAA4BA,GAC1CE,IAAQF,MAAM,6BAADc,OAA8Bd,EAAME,SAAW,kBAC3D,QACDoD,GAAW,KAKf4E,IA6DwB5G,KAAK,UACL+B,QAASA,EACTkC,MAAO,CAAE4C,WAAY,IACrBC,SAA0B,IAAhBjF,EAAK2C,OAAa/D,SAE3B0B,EAAaqC,OAAS,EAAC,oBAAAhF,OACE2C,EAAaqC,OAAM,KACvC,yBAM1BlE,cAACsD,IAAI,CAAAnD,SACDH,cAAA,OAAKE,UAAU,mBAAkBC,SAC7BH,cAACyG,IAAK,CACFC,QAASpE,EACTqE,WAAYC,MAAMC,QAAQtF,GAAQA,EAAO,GACzCuF,OAAO,KACPrF,QAASA,EACTwB,aAAc,CACVlB,kBACArC,KAAM,cACHuD","file":"static/js/22.6ade80c7.chunk.js","sourcesContent":["import * as history from 'history';\r\n\r\nexport default history.createBrowserHistory();","import axios from 'axios'\r\nimport { API_BASE_URL } from 'configs/AppConfig'\r\nimport history from '../history'\r\nimport { AUTH_TOKEN } from 'redux/constants/Auth'\r\nimport { notification } from 'antd';\r\n\r\nconst service = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 60000\r\n})\r\n\r\n// Config\r\nconst ENTRY_ROUTE = '/auth/login'\r\nconst TOKEN_PAYLOAD_KEY = 'authorization'\r\nconst PUBLIC_REQUEST_KEY = 'public-request'\r\n\r\n// API Request interceptor\r\nservice.interceptors.request.use(config => {\r\n\tconst jwtToken = localStorage.getItem(AUTH_TOKEN)\r\n\t\r\n  if (jwtToken) {\r\n    config.headers[TOKEN_PAYLOAD_KEY] = jwtToken\r\n  }\r\n\r\n  if (!jwtToken && !config.headers[PUBLIC_REQUEST_KEY]) {\r\n\t\thistory.push(ENTRY_ROUTE)\r\n\t\twindow.location.reload();\r\n  }\r\n\r\n  return config\r\n}, error => {\r\n\t// Do something with request error here\r\n\tnotification.error({\r\n\t\tmessage: 'Error'\r\n\t})\r\n  Promise.reject(error)\r\n})\r\n\r\n// API respone interceptor\r\nservice.interceptors.response.use( (response) => {\r\n\treturn response.data\r\n}, (error) => {\r\n\r\n\tlet notificationParam = {\r\n\t\tmessage: ''\r\n\t}\r\n\t\r\n\t// Ensure error.response is defined\r\n\tif (error.response) {\r\n\t\t// Remove token and redirect \r\n\t\tif (error.response.status === 400 || error.response.status === 403 || error.response.status === 401) {\r\n\t\t\tnotificationParam.message = 'Authentication Fail'\r\n\t\t\tnotificationParam.description = 'Please login again'\r\n\t\t\tlocalStorage.removeItem(AUTH_TOKEN)\r\n\t\t\thistory.push(ENTRY_ROUTE)\r\n\t\t\twindow.location.reload();\r\n\t\t}\r\n\r\n\t\tif (error.response.status === 404) {\r\n\t\t\tnotificationParam.message = 'Not Found'\r\n\t\t}\r\n\r\n\t\tif (error.response.status === 500) {\r\n\t\t\tnotificationParam.message = 'Internal Server Error'\r\n\t\t}\r\n\t\t\r\n\t\tif (error.response.status === 508) {\r\n\t\t\tnotificationParam.message = 'Time Out'\r\n\t\t}\r\n\r\n\t\tnotification.error(notificationParam)\r\n\t}\r\n\r\n\treturn Promise.reject(error);\r\n});\r\n\r\nexport default service","import service from 'auth/FetchInterceptor'\r\n\r\nconst classesService = {}\r\n\r\nclassesService.getByID = function (id) {\r\n  return service.get(`/classes/${id}`)\r\n}\r\n\r\nclassesService.getAll = function (params) {\r\n  return service.get('/classes', { params })\r\n}\r\n\r\nclassesService.delete = function (id) {\r\n  return service.delete(`/classes/${id}`)\r\n}\r\n\r\nclassesService.update = function (id, data) {\r\n  return service.post(`/classes/${id}`, data)\r\n}\r\n\r\nclassesService.create = function (data) {\r\n  return service.post('/classes', data)\r\n}\r\n\r\nclassesService.copy = function (id) {\r\n  return service.post(`/classes/${id}/copy`)\r\n}\r\n\r\nclassesService.import = function (file) {\r\n  const formData = new FormData();\r\n  formData.append('attachment', file);\r\n  return service.post('/classes/import', formData, {\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data'\r\n    }\r\n  });\r\n}\r\n\r\nclassesService.exportAll = function (type) {\r\n  if (type !== 'xlsx' && type !== 'csv') {\r\n    throw new Error('File type must be either xlsx or csv');\r\n  }\r\n\r\n  return service.get(`/classes/export?type=${type}`, {\r\n    responseType: 'blob' // Ensure response is treated as a binary file\r\n  });\r\n};\r\n\r\n\r\nclassesService.export = function (ids, type) {\r\n  if (type !== 'xlsx' && type !== 'csv') {\r\n    throw new Error('File type must be either xlsx or csv');\r\n  }\r\n  return service.post(`/classes/export/${type}`, { ids });\r\n}\r\n\r\nexport default classesService\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport { Avatar } from 'antd';\r\n\r\nconst renderAvatar = props => {\r\n\treturn <Avatar {...props} className={`ant-avatar-${props.type}`}>{props.text}</Avatar>;\r\n}\r\n\r\nexport const AvatarStatus = props => {\r\n\tconst { name, suffix, subTitle, id, type, src, icon, size, shape, gap, text, onNameClick } = props\r\n\treturn (\r\n\t\t<div className=\"avatar-status d-flex align-items-center\">\r\n\t\t\t{renderAvatar({icon, src, type, size, shape, gap, text })}\r\n\t\t\t<div className=\"ml-2\">\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tonNameClick ? \r\n\t\t\t\t\t\t<div onClick={() => onNameClick({name, subTitle, src, id})} className=\"avatar-status-name clickable\">{name}</div> \r\n\t\t\t\t\t\t:\r\n\t\t\t\t\t\t<div className=\"avatar-status-name\">{name}</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t\t<span>{suffix}</span>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"text-muted avatar-status-subtitle\">{subTitle}</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nAvatarStatus.propTypes = {\r\n\tname: PropTypes.string,\r\n\tsrc: PropTypes.string,\r\n\ttype: PropTypes.string,\r\n\tonNameClick: PropTypes.func\r\n}\r\n\r\n\r\nexport default AvatarStatus;\r\n","import React, {useState, useEffect} from 'react'\r\nimport { Card, Table, message, Select, Button } from 'antd';\r\nimport classesService from 'services/classes'\r\nimport AvatarStatus from 'components/shared-components/AvatarStatus';\r\nimport Flex from 'components/shared-components/Flex'\r\nimport utils from 'utils'\r\nconst { Option } = Select\r\n\r\nconst ExportClass = () => {\r\n    // State variables remain unchanged\r\n    const [classesData, setClassesData] = useState([]);\r\n    const [list, setList] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [fileType, setFileType] = useState('xlsx');\r\n    const [selectedRows, setSelectedRows] = useState([]);\r\n    const [selectedRowKeys, setSelectedRowKeys] = useState([]);\r\n\r\n    // Initial data loading\r\n    useEffect(() => {\r\n        const fetchClasses = async () => {\r\n            try {\r\n                setLoading(true);\r\n                const response = await classesService.getAll();\r\n                setClassesData(response.data || []);\r\n            } catch (error) {\r\n                console.error('Error fetching classes:', error);\r\n                message.error('Failed to load classes');\r\n                setClassesData([]);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n        fetchClasses();\r\n    }, []);\r\n    \r\n    useEffect(() => {\r\n        setList(classesData);\r\n    }, [classesData]);\r\n\r\n    // Updated handleExport function with correct parameter order\r\n    const handleExport = () => {\r\n        if (!fileType) {\r\n            message.error('Please select a file type');\r\n            return;\r\n        }\r\n\r\n        // Determine what data to export (selected rows or all)\r\n        const dataToExport = selectedRows.length > 0 ? selectedRows : list;\r\n        \r\n        if (dataToExport.length === 0) {\r\n            message.warning('No data to export');\r\n            return;\r\n        } \r\n\r\n        // Check if we're exporting selected rows or all data\r\n        if (selectedRows.length === 0) {\r\n            // Use exportAll service when exporting all data\r\n            const exportAllClasses = async () => {\r\n                try {\r\n                    setLoading(true);\r\n                    const result = await classesService.exportAll(fileType);\r\n                    console.log('Exported all classes:', result);\r\n                    if (result) {\r\n                        message.success(`All classes exported successfully as ${fileType.toUpperCase()}`);\r\n                        \r\n                        // Handle download the same way as in the regular export\r\n                        if (result.url) {\r\n                            window.open(result.url, '_blank');\r\n                        } else {\r\n                            const mimeType = fileType === 'xlsx' \r\n                                ? 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' \r\n                                : 'text/csv';\r\n                            \r\n                            let blob;\r\n                            \r\n                            if (result instanceof Blob) {\r\n                                blob = result;\r\n                            } else if (result.data) {\r\n                                blob = new Blob([result.data], { type: mimeType });\r\n                            } else {\r\n                                blob = new Blob([result], { type: mimeType });\r\n                            }\r\n                            \r\n                            const url = window.URL.createObjectURL(blob);\r\n                            const a = document.createElement('a');\r\n                            a.href = url;\r\n                            a.download = `all_classes_export_${new Date().toISOString().split('T')[0]}.${fileType}`;\r\n                            document.body.appendChild(a);\r\n                            a.click();\r\n                            window.URL.revokeObjectURL(url);\r\n                            a.remove();\r\n                        }\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Error exporting all classes:', error);\r\n                    message.error(`Failed to export all classes: ${error.message || 'Unknown error'}`);\r\n                } finally {\r\n                    setLoading(false);\r\n                }\r\n            };\r\n            \r\n            exportAllClasses();\r\n            return; // Exit the function early after starting the exportAll process\r\n        }\r\n\r\n        setLoading(true);\r\n        \r\n        const exportClasses = async () => {\r\n            try {\r\n            // Build params object with IDs to export\r\n            const params = {\r\n                ids: dataToExport.map(item => item.id)\r\n            };\r\n            \r\n            console.log(`Exporting with file type: ${fileType}, params:`, params);\r\n            \r\n            // Call the export service with proper URL encoding\r\n            const ids = params.ids.join(',');\r\n            \r\n            // Create a properly encoded URL using URLSearchParams\r\n            const queryParams = new URLSearchParams();\r\n            queryParams.append('ids', ids);\r\n            queryParams.append('type', fileType);\r\n            \r\n            const downloadUrl = `${process.env.REACT_APP_API_BASE_URL || ''}/api/classes/export?${queryParams.toString()}`;\r\n            \r\n            // Open the URL in a new tab to initiate download\r\n            window.open(downloadUrl, '_blank');\r\n            message.success(`Classes exported successfully as ${fileType.toUpperCase()}`);\r\n            \r\n            // Skip the rest of the function since we're handling the download directly\r\n            setLoading(false);\r\n            return;\r\n            } catch (error) {\r\n            console.error('Error exporting classes:', error);\r\n            message.error(`Failed to export classes: ${error.message || 'Unknown error'}`);\r\n            } finally {\r\n            setLoading(false);\r\n            }\r\n        };\r\n        \r\n        // Execute the export function\r\n        exportClasses();\r\n    };\r\n\r\n    // Table columns definition - unchanged\r\n    const tableColumns = [\r\n        {\r\n            title: 'ID',\r\n            dataIndex: 'id'\r\n        },\r\n        {\r\n            title: 'Class Name',\r\n            dataIndex: 'name',\r\n            render: (_, record) => (\r\n                <div className=\"d-flex\">\r\n                    <AvatarStatus size={60} type=\"square\" src={'/img/thumbs/book.webp'} name={record.name}/>\r\n                </div>\r\n            ),\r\n            sorter: (a, b) => utils.antdTableSorter(a, b, 'name')\r\n        },\r\n        {\r\n            title: 'Code',\r\n            dataIndex: 'code',\r\n            sorter: (a, b) => utils.antdTableSorter(a, b, 'code')\r\n        },\r\n        {\r\n            title: 'Description',\r\n            dataIndex: 'description',\r\n            sorter: (a, b) => utils.antdTableSorter(a, b, 'description')\r\n        },\r\n    ];\r\n\r\n    // Row selection configuration - unchanged\r\n    const rowSelection = {\r\n        onChange: (keys, rows) => {\r\n            setSelectedRowKeys(keys);\r\n            setSelectedRows(rows);\r\n        }\r\n    };\r\n\r\n    // Render component - unchanged except for button margin fix\r\n    return (\r\n        <>\r\n            <div className=\"mb-3\">\r\n                <Card>\r\n                    <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n                        <h3 className=\"mb-0 mr-5\">Export Classes</h3>\r\n                        <Flex justifyContent='flex-start'>   \r\n                            <Select \r\n                                defaultValue=\"xlsx\"\r\n                                style={{ width: 200 }}\r\n                                value={fileType}\r\n                                onChange={(value) => {\r\n                                    setFileType(value);\r\n                                }}\r\n                                placeholder=\"Select file type\"\r\n                            >\r\n                                <Option value=\"xlsx\">Excel (.xlsx)</Option>\r\n                                <Option value=\"csv\">CSV (.csv)</Option>\r\n                            </Select>\r\n                            <Button \r\n                                onClick={handleExport}\r\n                                type=\"primary\" \r\n                                loading={loading}\r\n                                style={{ marginLeft: 16 }}\r\n                                disabled={list.length === 0}\r\n                            >\r\n                                {selectedRows.length > 0 \r\n                                    ? `Export Selected (${selectedRows.length})` \r\n                                    : 'Export All'}\r\n                            </Button>\r\n                        </Flex>\r\n                    </Flex>\r\n                </Card>\r\n            </div>\r\n            <Card>\t\r\n                <div className=\"table-responsive\">\r\n                    <Table \r\n                        columns={tableColumns} \r\n                        dataSource={Array.isArray(list) ? list : []} \r\n                        rowKey='id' \r\n                        loading={loading}\r\n                        rowSelection={{\r\n                            selectedRowKeys,\r\n                            type: 'checkbox',\r\n                            ...rowSelection\r\n                        }}\r\n                    />\r\n                </div>\r\n            </Card>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ExportClass;"],"sourceRoot":""}