{"version":3,"sources":["history.js","auth/FetchInterceptor.js","services/classes.js","components/shared-components/AvatarStatus/index.js","views/app-views/apps/import-class/index.js"],"names":["history","service","axios","create","baseURL","API_BASE_URL","timeout","ENTRY_ROUTE","interceptors","request","use","config","jwtToken","localStorage","getItem","AUTH_TOKEN","headers","push","window","location","reload","error","notification","message","Promise","reject","response","data","notificationParam","status","description","removeItem","classesService","id","get","concat","params","delete","post","file","formData","FormData","append","type","Error","responseType","ids","renderAvatar","props","_jsx","Avatar","className","children","text","AvatarStatus","name","suffix","subTitle","src","icon","size","shape","gap","onNameClick","_jsxs","onClick","Option","Select","ImportClass","classesData","setClassesData","useState","loading","setLoading","list","setList","React","useEffect","tableColumns","title","dataIndex","render","_","record","sorter","a","b","utils","antdTableSorter","fileType","setFileType","fileList","setFileList","_Fragment","Card","Flex","alignItems","justifyContent","Upload","accept","showUploadList","beforeUpload","info","onChange","_ref","Button","style","marginRight","defaultValue","width","marginLeft","value","placeholder","handleImport","_fileList$","length","originFileObj","async","result","import","console","log","created","success","importClasses","Table","columns","dataSource","rowKey"],"mappings":"iIAEeA,E,OAAAA,I,iBCIf,MAAMC,EAAUC,IAAMC,OAAO,CAC3BC,QAASC,IACTC,QAAS,MAILC,EAAc,cAKpBN,EAAQO,aAAaC,QAAQC,KAAIC,IAChC,MAAMC,EAAWC,aAAaC,QAAQC,KAWrC,OATIH,IACFD,EAAOK,QAAyB,cAAIJ,GAGjCA,GAAaD,EAAOK,QAVA,oBAWzBhB,EAAQiB,KAAKV,GACbW,OAAOC,SAASC,UAGTT,KACNU,IAEFC,IAAaD,MAAM,CAClBE,QAAS,UAETC,QAAQC,OAAOJ,MAIjBpB,EAAQO,aAAakB,SAAShB,KAAMgB,GAC5BA,EAASC,OACbN,IAEH,IAAIO,EAAoB,CACvBL,QAAS,IA6BV,OAzBIF,EAAMK,WAEqB,MAA1BL,EAAMK,SAASG,QAA4C,MAA1BR,EAAMK,SAASG,QAA4C,MAA1BR,EAAMK,SAASG,SACpFD,EAAkBL,QAAU,sBAC5BK,EAAkBE,YAAc,qBAChCjB,aAAakB,WAAWhB,KACxBf,EAAQiB,KAAKV,GACbW,OAAOC,SAASC,UAGa,MAA1BC,EAAMK,SAASG,SAClBD,EAAkBL,QAAU,aAGC,MAA1BF,EAAMK,SAASG,SAClBD,EAAkBL,QAAU,yBAGC,MAA1BF,EAAMK,SAASG,SAClBD,EAAkBL,QAAU,YAG7BD,IAAaD,MAAMO,IAGbJ,QAAQC,OAAOJ,MAGRpB,O,iCC5Ef,aAEA,MAAM+B,EAAiB,CAEvBA,QAAyB,SAAUC,GACjC,OAAOhC,IAAQiC,IAAI,YAADC,OAAaF,KAGjCD,OAAwB,SAAUI,GAChC,OAAOnC,IAAQiC,IAAI,WAAY,CAAEE,YAGnCJ,OAAwB,SAAUC,GAChC,OAAOhC,IAAQoC,OAAO,YAADF,OAAaF,KAGpCD,OAAwB,SAAUC,EAAIN,GACpC,OAAO1B,IAAQqC,KAAK,YAADH,OAAaF,GAAMN,IAGxCK,OAAwB,SAAUL,GAChC,OAAO1B,IAAQqC,KAAK,WAAYX,IAGlCK,KAAsB,SAAUC,GAC9B,OAAOhC,IAAQqC,KAAK,YAADH,OAAaF,EAAE,WAGpCD,OAAwB,SAAUO,GAChC,MAAMC,EAAW,IAAIC,SAErB,OADAD,EAASE,OAAO,aAAcH,GACvBtC,IAAQqC,KAAK,kBAAmBE,EAAU,CAC/CxB,QAAS,CACP,eAAgB,0BAKtBgB,UAA2B,SAAUW,GACnC,GAAa,SAATA,GAA4B,QAATA,EACrB,MAAM,IAAIC,MAAM,wCAGlB,OAAO3C,IAAQiC,IAAI,wBAADC,OAAyBQ,GAAQ,CACjDE,aAAc,UAKlBb,OAAwB,SAAUc,EAAKH,GACrC,GAAa,SAATA,GAA4B,QAATA,EACrB,MAAM,IAAIC,MAAM,wCAElB,OAAO3C,IAAQqC,KAAK,mBAADH,OAAoBQ,GAAQ,CAAEG,UAGpCd,O,iCCxDf,yBAIA,MAAMe,EAAeC,GACbC,cAACC,IAAM,IAAKF,EAAOG,UAAS,cAAAhB,OAAgBa,EAAML,MAAOS,SAAEJ,EAAMK,OAgC1DC,IA7BaN,IAC3B,MAAM,KAAEO,EAAI,OAAEC,EAAM,SAAEC,EAAQ,GAAExB,EAAE,KAAEU,EAAI,IAAEe,EAAG,KAAEC,EAAI,KAAEC,EAAI,MAAEC,EAAK,IAAEC,EAAG,KAAET,EAAI,YAAEU,GAAgBf,EAC7F,OACCgB,eAAA,OAAKb,UAAU,0CAAyCC,SAAA,CACtDL,EAAa,CAACY,OAAMD,MAAKf,OAAMiB,OAAMC,QAAOC,MAAKT,SAClDW,eAAA,OAAKb,UAAU,OAAMC,SAAA,CACpBY,eAAA,OAAAZ,SAAA,CAEEW,EACAd,cAAA,OAAKgB,QAASA,IAAMF,EAAY,CAACR,OAAME,WAAUC,MAAKzB,OAAMkB,UAAU,+BAA8BC,SAAEG,IAEtGN,cAAA,OAAKE,UAAU,qBAAoBC,SAAEG,IAEtCN,cAAA,QAAAG,SAAOI,OAERP,cAAA,OAAKE,UAAU,oCAAmCC,SAAEK,Y,iCCvBxD,0HAMA,MAAM,OAAES,GAAWC,IA8IJC,UA5IKA,KAChB,MAAOC,EAAaC,GAAkBC,mBAAS,KACxCC,EAASC,GAAcF,oBAAS,IA2ChCG,EAAMC,GAAWJ,mBAAS,IAEjCK,IAAMC,WAAU,KACZF,EAAQN,KACT,CAACA,IAEJ,MAAMS,EAAe,CACjB,CACIC,MAAO,KACPC,UAAW,MAEf,CACID,MAAO,aACPC,UAAW,OACXC,OAAQA,CAACC,EAAGC,IACRlC,cAAA,OAAKE,UAAU,SAAQC,SACnBH,cAACK,IAAY,CAACM,KAAM,GAAIjB,KAAK,SAASe,IAAK,wBAAyBH,KAAM4B,EAAO5B,SAGzF6B,OAAQA,CAACC,EAAGC,IAAMC,IAAMC,gBAAgBH,EAAGC,EAAG,SAElD,CACIP,MAAO,OACPC,UAAW,OACXI,OAAQA,CAACC,EAAGC,IAAMC,IAAMC,gBAAgBH,EAAGC,EAAG,SAElD,CACIP,MAAO,cACPC,UAAW,cACXI,OAAQA,CAACC,EAAGC,IAAMC,IAAMC,gBAAgBH,EAAGC,EAAG,kBAK/CG,EAAUC,GAAenB,mBAAS,SAClCoB,EAAUC,GAAerB,mBAAS,IAEzC,OACIP,eAAA6B,WAAA,CAAAzC,SAAA,CACIH,cAAA,OAAKE,UAAU,OAAMC,SACjBH,cAAC6C,IAAI,CAAA1C,SACDY,eAAC+B,IAAI,CAACC,WAAW,SAASC,eAAe,gBAAe7C,SAAA,CACpDH,cAAA,MAAIE,UAAU,YAAWC,SAAC,mBAC1BY,eAAC+B,IAAI,CAACE,eAAe,aAAY7C,SAAA,CAC7BH,cAACiD,IAAM,CACHC,OAAO,mBACPC,gBAAgB,EAChBC,aAAe9D,IACXhB,IAAQ+E,KAAK,mDACN,GAEXX,SAAUA,EACVY,SAAUC,IAAyB,IAAxB,KAAEjE,EAAI,SAAEoD,GAAUa,EACzBZ,EAAYD,IACdvC,SAEFH,cAACwD,IAAM,CAAC9D,KAAK,UAAU+D,MAAO,CAAEC,YAAa,IAAKvD,SAAC,kBAEvDY,eAACG,IAAM,CACHyC,aAAa,OACbF,MAAO,CAAEG,MAAO,IAAKC,WAAY,IACjCP,SAAWQ,IACPrB,EAAYqB,IAEhBC,YAAY,mBAAkB5D,SAAA,CAE9BH,cAACiB,EAAM,CAAC6C,MAAM,OAAM3D,SAAC,kBACrBH,cAACiB,EAAM,CAAC6C,MAAM,MAAK3D,SAAC,eACpBH,cAACiB,EAAM,CAAC6C,MAAM,OAAM3D,SAAC,oBAEzBH,cAACwD,IAAM,CACHxC,QA/GPgD,KAAO,IAADC,EACvB,GAAwB,IAApBvB,EAASwB,OAET,YADA5F,IAAQF,MAAM,8BAIlB,IAAKoE,EAED,YADAlE,IAAQF,MAAM,6BAIlBoD,GAAW,GACX,MAAMlC,EAAkB,QAAd2E,EAAGvB,EAAS,UAAE,IAAAuB,OAAA,EAAXA,EAAaE,cAE1B,IAAK7E,EAGD,OAFAhB,IAAQF,MAAM,qBACdoD,GAAW,GAIO4C,WAClB,IACI,MAAMC,QAAetF,IAAeuF,OAAOhF,GACvC+E,GAAUA,EAAO3F,OACjB6F,QAAQC,IAAI,oBAAqBH,EAAO3F,MACxC2C,EAAegD,EAAO3F,KAAK+F,SAC3BnG,IAAQoG,QAAQ,iCAChBH,QAAQC,IAAIpD,IAElB,MAAOhD,GACLmG,QAAQnG,MAAM,2BAA4BA,GAC1CE,IAAQF,MAAM,2DACjB,QACGoD,GAAW,KAInBmD,IA2EwBjF,KAAK,UACL6B,QAASA,EACTkC,MAAO,CAAEI,WAAY,KAAM1D,SAC9B,qBAOjBH,cAAC6C,IAAI,CAAA1C,SACDH,cAAA,OAAKE,UAAU,mBAAkBC,SAC7BH,cAAC4E,IAAK,CACFC,QAAShD,EACTiD,WAAYrD,EACZsD,OAAO,KACPxD,QAASA","file":"static/js/23.ad251c79.chunk.js","sourcesContent":["import * as history from 'history';\r\n\r\nexport default history.createBrowserHistory();","import axios from 'axios'\r\nimport { API_BASE_URL } from 'configs/AppConfig'\r\nimport history from '../history'\r\nimport { AUTH_TOKEN } from 'redux/constants/Auth'\r\nimport { notification } from 'antd';\r\n\r\nconst service = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 60000\r\n})\r\n\r\n// Config\r\nconst ENTRY_ROUTE = '/auth/login'\r\nconst TOKEN_PAYLOAD_KEY = 'authorization'\r\nconst PUBLIC_REQUEST_KEY = 'public-request'\r\n\r\n// API Request interceptor\r\nservice.interceptors.request.use(config => {\r\n\tconst jwtToken = localStorage.getItem(AUTH_TOKEN)\r\n\t\r\n  if (jwtToken) {\r\n    config.headers[TOKEN_PAYLOAD_KEY] = jwtToken\r\n  }\r\n\r\n  if (!jwtToken && !config.headers[PUBLIC_REQUEST_KEY]) {\r\n\t\thistory.push(ENTRY_ROUTE)\r\n\t\twindow.location.reload();\r\n  }\r\n\r\n  return config\r\n}, error => {\r\n\t// Do something with request error here\r\n\tnotification.error({\r\n\t\tmessage: 'Error'\r\n\t})\r\n  Promise.reject(error)\r\n})\r\n\r\n// API respone interceptor\r\nservice.interceptors.response.use( (response) => {\r\n\treturn response.data\r\n}, (error) => {\r\n\r\n\tlet notificationParam = {\r\n\t\tmessage: ''\r\n\t}\r\n\t\r\n\t// Ensure error.response is defined\r\n\tif (error.response) {\r\n\t\t// Remove token and redirect \r\n\t\tif (error.response.status === 400 || error.response.status === 403 || error.response.status === 401) {\r\n\t\t\tnotificationParam.message = 'Authentication Fail'\r\n\t\t\tnotificationParam.description = 'Please login again'\r\n\t\t\tlocalStorage.removeItem(AUTH_TOKEN)\r\n\t\t\thistory.push(ENTRY_ROUTE)\r\n\t\t\twindow.location.reload();\r\n\t\t}\r\n\r\n\t\tif (error.response.status === 404) {\r\n\t\t\tnotificationParam.message = 'Not Found'\r\n\t\t}\r\n\r\n\t\tif (error.response.status === 500) {\r\n\t\t\tnotificationParam.message = 'Internal Server Error'\r\n\t\t}\r\n\t\t\r\n\t\tif (error.response.status === 508) {\r\n\t\t\tnotificationParam.message = 'Time Out'\r\n\t\t}\r\n\r\n\t\tnotification.error(notificationParam)\r\n\t}\r\n\r\n\treturn Promise.reject(error);\r\n});\r\n\r\nexport default service","import service from 'auth/FetchInterceptor'\r\n\r\nconst classesService = {}\r\n\r\nclassesService.getByID = function (id) {\r\n  return service.get(`/classes/${id}`)\r\n}\r\n\r\nclassesService.getAll = function (params) {\r\n  return service.get('/classes', { params })\r\n}\r\n\r\nclassesService.delete = function (id) {\r\n  return service.delete(`/classes/${id}`)\r\n}\r\n\r\nclassesService.update = function (id, data) {\r\n  return service.post(`/classes/${id}`, data)\r\n}\r\n\r\nclassesService.create = function (data) {\r\n  return service.post('/classes', data)\r\n}\r\n\r\nclassesService.copy = function (id) {\r\n  return service.post(`/classes/${id}/copy`)\r\n}\r\n\r\nclassesService.import = function (file) {\r\n  const formData = new FormData();\r\n  formData.append('attachment', file);\r\n  return service.post('/classes/import', formData, {\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data'\r\n    }\r\n  });\r\n}\r\n\r\nclassesService.exportAll = function (type) {\r\n  if (type !== 'xlsx' && type !== 'csv') {\r\n    throw new Error('File type must be either xlsx or csv');\r\n  }\r\n\r\n  return service.get(`/classes/export?type=${type}`, {\r\n    responseType: 'blob' // Ensure response is treated as a binary file\r\n  });\r\n};\r\n\r\n\r\nclassesService.export = function (ids, type) {\r\n  if (type !== 'xlsx' && type !== 'csv') {\r\n    throw new Error('File type must be either xlsx or csv');\r\n  }\r\n  return service.post(`/classes/export/${type}`, { ids });\r\n}\r\n\r\nexport default classesService\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport { Avatar } from 'antd';\r\n\r\nconst renderAvatar = props => {\r\n\treturn <Avatar {...props} className={`ant-avatar-${props.type}`}>{props.text}</Avatar>;\r\n}\r\n\r\nexport const AvatarStatus = props => {\r\n\tconst { name, suffix, subTitle, id, type, src, icon, size, shape, gap, text, onNameClick } = props\r\n\treturn (\r\n\t\t<div className=\"avatar-status d-flex align-items-center\">\r\n\t\t\t{renderAvatar({icon, src, type, size, shape, gap, text })}\r\n\t\t\t<div className=\"ml-2\">\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tonNameClick ? \r\n\t\t\t\t\t\t<div onClick={() => onNameClick({name, subTitle, src, id})} className=\"avatar-status-name clickable\">{name}</div> \r\n\t\t\t\t\t\t:\r\n\t\t\t\t\t\t<div className=\"avatar-status-name\">{name}</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t\t<span>{suffix}</span>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"text-muted avatar-status-subtitle\">{subTitle}</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nAvatarStatus.propTypes = {\r\n\tname: PropTypes.string,\r\n\tsrc: PropTypes.string,\r\n\ttype: PropTypes.string,\r\n\tonNameClick: PropTypes.func\r\n}\r\n\r\n\r\nexport default AvatarStatus;\r\n","import React, {useState} from 'react'\r\nimport { Card, Table, message, Select, Upload, Button } from 'antd';\r\nimport classesService from 'services/classes'  // Fixed typo in import name\r\nimport AvatarStatus from 'components/shared-components/AvatarStatus';\r\nimport Flex from 'components/shared-components/Flex'\r\nimport utils from 'utils'\r\nconst { Option } = Select\r\n\r\nconst ImportClass = () => {\r\n    const [classesData, setClassesData] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    // Fixed handleImport function - it was being called immediately\r\n    const handleImport = () => {\r\n        if (fileList.length === 0) {\r\n            message.error('Please select a file first');\r\n            return;\r\n        }\r\n\r\n        if (!fileType) {\r\n            message.error('Please select a file type');\r\n            return;\r\n        }\r\n\r\n        setLoading(true);\r\n        const file = fileList[0]?.originFileObj;\r\n        \r\n        if (!file) {\r\n            message.error('Invalid file');\r\n            setLoading(false);\r\n            return;\r\n        }\r\n\r\n        const importClasses = async () => {\r\n            try {\r\n                const result = await classesService.import(file);\r\n                if (result && result.data) {\r\n                    console.log('Imported classes:', result.data);\r\n                    setClassesData(result.data.created);\r\n                    message.success(`Classes imported successfully`);\r\n                    console.log(classesData);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error importing classes:', error);\r\n                message.error('Failed to import classes. Please check the file format.');\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n        \r\n        importClasses();\r\n    };\r\n\r\n    const [list, setList] = useState([]);\r\n\r\n    React.useEffect(() => {\r\n        setList(classesData);\r\n    }, [classesData]);\r\n\r\n    const tableColumns = [\r\n        {\r\n            title: 'ID',\r\n            dataIndex: 'id'\r\n        },\r\n        {\r\n            title: 'Class Name',\r\n            dataIndex: 'name',\r\n            render: (_, record) => (\r\n                <div className=\"d-flex\">\r\n                    <AvatarStatus size={60} type=\"square\" src={'/img/thumbs/book.webp'} name={record.name}/>\r\n                </div>\r\n            ),\r\n            sorter: (a, b) => utils.antdTableSorter(a, b, 'name')\r\n        },\r\n        {\r\n            title: 'Code',\r\n            dataIndex: 'code',\r\n            sorter: (a, b) => utils.antdTableSorter(a, b, 'code')\r\n        },\r\n        {\r\n            title: 'Description',\r\n            dataIndex: 'description',\r\n            sorter: (a, b) => utils.antdTableSorter(a, b, 'description')\r\n        },\r\n    ];\r\n\r\n\r\n    const [fileType, setFileType] = useState('xlsx');\r\n    const [fileList, setFileList] = useState([]);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"mb-3\">\r\n                <Card>\r\n                    <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n                        <h3 className=\"mb-0 mr-5\">Import Classes</h3>\r\n                        <Flex justifyContent='flex-start'>\r\n                            <Upload\r\n                                accept=\".xlsx,.csv,.json\"\r\n                                showUploadList={true}\r\n                                beforeUpload={(file) => {\r\n                                    message.info(`File selected. Please click Import to proceed.`);\r\n                                    return false;\r\n                                }}\r\n                                fileList={fileList}\r\n                                onChange={({ file, fileList }) => {\r\n                                    setFileList(fileList);\r\n                                }}\r\n                            >\r\n                                <Button type=\"primary\" style={{ marginRight: 16 }}>Select File</Button>\r\n                            </Upload>   \r\n                            <Select \r\n                                defaultValue=\"xlsx\"\r\n                                style={{ width: 200, marginLeft: 16 }}\r\n                                onChange={(value) => {\r\n                                    setFileType(value);\r\n                                }}\r\n                                placeholder=\"Select file type\"\r\n                            >\r\n                                <Option value=\"xlsx\">Excel (.xlsx)</Option>\r\n                                <Option value=\"csv\">CSV (.csv)</Option>\r\n                                <Option value=\"json\">JSON (.json)</Option>\r\n                            </Select>\r\n                            <Button \r\n                                onClick={handleImport} \r\n                                type=\"primary\" \r\n                                loading={loading}\r\n                                style={{ marginLeft: 500 }}\r\n                            >\r\n                                Import\r\n                            </Button>\r\n                        </Flex>\r\n                    </Flex>\r\n                </Card>\r\n            </div>\r\n            <Card>\t\r\n                <div className=\"table-responsive\">\r\n                    <Table \r\n                        columns={tableColumns} \r\n                        dataSource={list} \r\n                        rowKey='id' \r\n                        loading={loading}\r\n                    />\r\n                </div>\r\n            </Card>\r\n        </>\r\n    )\r\n}\r\nexport default ImportClass;"],"sourceRoot":""}