{"version":3,"sources":["history.js","auth/FetchInterceptor.js","services/students.js","components/shared-components/AvatarStatus/index.js","views/app-views/apps/export-student/index.js"],"names":["history","service","axios","create","baseURL","API_BASE_URL","timeout","ENTRY_ROUTE","interceptors","request","use","config","jwtToken","localStorage","getItem","AUTH_TOKEN","headers","push","window","location","reload","error","notification","message","Promise","reject","response","data","notificationParam","status","description","removeItem","studentsService","id","get","concat","params","delete","post","file","formData","FormData","append","type","Error","responseType","ids","renderAvatar","props","_jsx","Avatar","className","children","text","AvatarStatus","name","suffix","subTitle","src","icon","size","shape","gap","onNameClick","_jsxs","onClick","Option","Select","ExportStudent","studentsData","setStudentsData","useState","list","setList","loading","setLoading","fileType","setFileType","selectedRows","setSelectedRows","selectedRowKeys","setSelectedRowKeys","useEffect","async","getAll","console","fetchStudents","tableColumns","title","dataIndex","render","_","record","index","sorter","a","b","attachment","fullname","utils","antdTableSorter","rowSelection","onChange","key","rows","_Fragment","Card","Flex","alignItems","justifyContent","defaultValue","style","width","value","placeholder","Button","handleExport","dataToExport","length","warning","result","exportAll","log","success","toUpperCase","url","open","mimeType","blob","Blob","URL","createObjectURL","document","createElement","href","download","Date","toISOString","split","body","appendChild","click","revokeObjectURL","remove","exportAllStudents","map","item","join","queryParams","URLSearchParams","downloadUrl","process","REACT_APP_API_BASE_URL","toString","exportStudents","marginLeft","disabled","Table","columns","dataSource","Array","isArray","rowKey"],"mappings":"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","file":"static/js/24.956f3089.chunk.js","sourcesContent":["import * as history from 'history';\r\n\r\nexport default history.createBrowserHistory();","import axios from 'axios'\r\nimport { API_BASE_URL } from 'configs/AppConfig'\r\nimport history from '../history'\r\nimport { AUTH_TOKEN } from 'redux/constants/Auth'\r\nimport { notification } from 'antd';\r\n\r\nconst service = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 60000\r\n})\r\n\r\n// Config\r\nconst ENTRY_ROUTE = '/auth/login'\r\nconst TOKEN_PAYLOAD_KEY = 'authorization'\r\nconst PUBLIC_REQUEST_KEY = 'public-request'\r\n\r\n// API Request interceptor\r\nservice.interceptors.request.use(config => {\r\n\tconst jwtToken = localStorage.getItem(AUTH_TOKEN)\r\n\t\r\n  if (jwtToken) {\r\n    config.headers[TOKEN_PAYLOAD_KEY] = jwtToken\r\n  }\r\n\r\n  if (!jwtToken && !config.headers[PUBLIC_REQUEST_KEY]) {\r\n\t\thistory.push(ENTRY_ROUTE)\r\n\t\twindow.location.reload();\r\n  }\r\n\r\n  return config\r\n}, error => {\r\n\t// Do something with request error here\r\n\tnotification.error({\r\n\t\tmessage: 'Error'\r\n\t})\r\n  Promise.reject(error)\r\n})\r\n\r\n// API respone interceptor\r\nservice.interceptors.response.use( (response) => {\r\n\treturn response.data\r\n}, (error) => {\r\n\r\n\tlet notificationParam = {\r\n\t\tmessage: ''\r\n\t}\r\n\t\r\n\t// Ensure error.response is defined\r\n\tif (error.response) {\r\n\t\t// Remove token and redirect \r\n\t\tif (error.response.status === 400 || error.response.status === 403 || error.response.status === 401) {\r\n\t\t\tnotificationParam.message = 'Authentication Fail'\r\n\t\t\tnotificationParam.description = 'Please login again'\r\n\t\t\tlocalStorage.removeItem(AUTH_TOKEN)\r\n\t\t\thistory.push(ENTRY_ROUTE)\r\n\t\t\twindow.location.reload();\r\n\t\t}\r\n\r\n\t\tif (error.response.status === 404) {\r\n\t\t\tnotificationParam.message = 'Not Found'\r\n\t\t}\r\n\r\n\t\tif (error.response.status === 500) {\r\n\t\t\tnotificationParam.message = 'Internal Server Error'\r\n\t\t}\r\n\t\t\r\n\t\tif (error.response.status === 508) {\r\n\t\t\tnotificationParam.message = 'Time Out'\r\n\t\t}\r\n\r\n\t\tnotification.error(notificationParam)\r\n\t}\r\n\r\n\treturn Promise.reject(error);\r\n});\r\n\r\nexport default service","import service from 'auth/FetchInterceptor'\r\n\r\nconst studentsService = {}\r\n\r\nstudentsService.getByID = function (id) {\r\n  return service.get(`/students/${id}`)\r\n}\r\n\r\nstudentsService.getAll = function (params) {\r\n  return service.get('/students', { params })\r\n}\r\n\r\nstudentsService.delete = function (id) {\r\n  return service.delete(`/students/${id}`)\r\n}\r\n\r\nstudentsService.update = function (id, data) {\r\n  return service.post(`/students/${id}`, data)\r\n}\r\n\r\nstudentsService.create = function (data) {\r\n  return service.post('/students', data)\r\n}\r\n\r\nstudentsService.copy = function (id) {\r\n  return service.post(`/students/${id}/copy`)\r\n}\r\n\r\nstudentsService.import = function (file) {\r\n  const formData = new FormData();\r\n  formData.append('attachment', file);\r\n  return service.post('/students/import', formData, {\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data'\r\n    }\r\n  });\r\n}\r\n\r\nstudentsService.exportAll = function (type) {\r\n  if (type !== 'xlsx' && type !== 'csv') {\r\n    throw new Error('File type must be either xlsx or csv');\r\n  }\r\n\r\n  return service.get(`/students/export?type=${type}`, {\r\n    responseType: 'blob' // Ensure response is treated as a binary file\r\n  });\r\n};\r\n\r\n\r\nstudentsService.export = function (ids, type) {\r\n  if (type !== 'xlsx' && type !== 'csv') {\r\n    throw new Error('File type must be either xlsx or csv');\r\n  }\r\n  return service.post(`/students/export/${type}`, { ids });\r\n}\r\n\r\nexport default studentsService\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport { Avatar } from 'antd';\r\n\r\nconst renderAvatar = props => {\r\n\treturn <Avatar {...props} className={`ant-avatar-${props.type}`}>{props.text}</Avatar>;\r\n}\r\n\r\nexport const AvatarStatus = props => {\r\n\tconst { name, suffix, subTitle, id, type, src, icon, size, shape, gap, text, onNameClick } = props\r\n\treturn (\r\n\t\t<div className=\"avatar-status d-flex align-items-center\">\r\n\t\t\t{renderAvatar({icon, src, type, size, shape, gap, text })}\r\n\t\t\t<div className=\"ml-2\">\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tonNameClick ? \r\n\t\t\t\t\t\t<div onClick={() => onNameClick({name, subTitle, src, id})} className=\"avatar-status-name clickable\">{name}</div> \r\n\t\t\t\t\t\t:\r\n\t\t\t\t\t\t<div className=\"avatar-status-name\">{name}</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t\t<span>{suffix}</span>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"text-muted avatar-status-subtitle\">{subTitle}</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nAvatarStatus.propTypes = {\r\n\tname: PropTypes.string,\r\n\tsrc: PropTypes.string,\r\n\ttype: PropTypes.string,\r\n\tonNameClick: PropTypes.func\r\n}\r\n\r\n\r\nexport default AvatarStatus;\r\n","import React, {useState, useEffect} from 'react'\r\nimport { Card, Table, message, Select, Button } from 'antd';\r\nimport studentsService from 'services/students'\r\nimport AvatarStatus from 'components/shared-components/AvatarStatus';\r\nimport Flex from 'components/shared-components/Flex'\r\nimport utils from 'utils'\r\nconst { Option } = Select\r\n\r\nconst ExportStudent = () => {\r\n    // State variables remain unchanged\r\n    const [studentsData, setStudentsData] = useState([]);\r\n    const [list, setList] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [fileType, setFileType] = useState('xlsx');\r\n    const [selectedRows, setSelectedRows] = useState([]);\r\n    const [selectedRowKeys, setSelectedRowKeys] = useState([]);\r\n\r\n    // Initial data loading\r\n    useEffect(() => {\r\n        const fetchStudents = async () => {\r\n            try {\r\n                setLoading(true);\r\n                const response = await studentsService.getAll();\r\n                setStudentsData(response.data || []);\r\n            } catch (error) {\r\n                console.error('Error fetching students:', error);\r\n                message.error('Failed to load students');\r\n                setStudentsData([]);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n        fetchStudents();\r\n    }, []);\r\n    \r\n    useEffect(() => {\r\n        setList(studentsData);\r\n    }, [studentsData]);\r\n\r\n    // Updated handleExport function with correct parameter order\r\n    const handleExport = () => {\r\n        if (!fileType) {\r\n            message.error('Please select a file type');\r\n            return;\r\n        }\r\n\r\n        // Determine what data to export (selected rows or all)\r\n        const dataToExport = selectedRows.length > 0 ? selectedRows : list;\r\n        \r\n        if (dataToExport.length === 0) {\r\n            message.warning('No data to export');\r\n            return;\r\n        } \r\n\r\n        // Check if we're exporting selected rows or all data\r\n        if (selectedRows.length === 0) {\r\n            // Use exportAll service when exporting all data\r\n            const exportAllStudents = async () => {\r\n                try {\r\n                    setLoading(true);\r\n                    const result = await studentsService.exportAll(fileType);\r\n                    console.log('Exported all students:', result);\r\n                    if (result) {\r\n                        message.success(`All students exported successfully as ${fileType.toUpperCase()}`);\r\n                        \r\n                        // Handle download the same way as in the regular export\r\n                        if (result.url) {\r\n                            window.open(result.url, '_blank');\r\n                        } else {\r\n                            const mimeType = fileType === 'xlsx' \r\n                                ? 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' \r\n                                : 'text/csv';\r\n                            \r\n                            let blob;\r\n                            \r\n                            if (result instanceof Blob) {\r\n                                blob = result;\r\n                            } else if (result.data) {\r\n                                blob = new Blob([result.data], { type: mimeType });\r\n                            } else {\r\n                                blob = new Blob([result], { type: mimeType });\r\n                            }\r\n                            \r\n                            const url = window.URL.createObjectURL(blob);\r\n                            const a = document.createElement('a');\r\n                            a.href = url;\r\n                            a.download = `all_students_export_${new Date().toISOString().split('T')[0]}.${fileType}`;\r\n                            document.body.appendChild(a);\r\n                            a.click();\r\n                            window.URL.revokeObjectURL(url);\r\n                            a.remove();\r\n                        }\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Error exporting all students:', error);\r\n                    message.error(`Failed to export all students: ${error.message || 'Unknown error'}`);\r\n                } finally {\r\n                    setLoading(false);\r\n                }\r\n            };\r\n            \r\n            exportAllStudents();\r\n            return; // Exit the function early after starting the exportAll process\r\n        }\r\n\r\n        setLoading(true);\r\n        \r\n        const exportStudents = async () => {\r\n            try {\r\n            // Build params object with IDs to export\r\n            const params = {\r\n                ids: dataToExport.map(item => item.id)\r\n            };\r\n            \r\n            console.log(`Exporting with file type: ${fileType}, params:`, params);\r\n            \r\n            // Call the export service with proper URL encoding\r\n            const ids = params.ids.join(',');\r\n            \r\n            // Create a properly encoded URL using URLSearchParams\r\n            const queryParams = new URLSearchParams();\r\n            queryParams.append('ids', ids);\r\n            queryParams.append('type', fileType);\r\n            \r\n            const downloadUrl = `${process.env.REACT_APP_API_BASE_URL || ''}/api/students/export?${queryParams.toString()}`;\r\n            \r\n            // Open the URL in a new tab to initiate download\r\n            window.open(downloadUrl, '_blank');\r\n            message.success(`Students exported successfully as ${fileType.toUpperCase()}`);\r\n            \r\n            // Skip the rest of the function since we're handling the download directly\r\n            setLoading(false);\r\n            return;\r\n            } catch (error) {\r\n            console.error('Error exporting students:', error);\r\n            message.error(`Failed to export students: ${error.message || 'Unknown error'}`);\r\n            } finally {\r\n            setLoading(false);\r\n            }\r\n        };\r\n        \r\n        // Execute the export function\r\n        exportStudents();\r\n    };\r\n\r\n    // Table columns definition - unchanged\r\n    const tableColumns = [\r\n\t\t{\r\n\t\t\ttitle: 'ID',\r\n\t\t\tdataIndex: 'id',\r\n\t\t\trender: (_, record, index) => {\r\n\t\t\t\treturn index + 1;\r\n\t\t\t},\r\n\t\t\tsorter: (a, b) => a.id - b.id\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Student Name',\r\n\t\t\tdataIndex: 'fullname',\r\n\t\t\trender: (_, record) => (\r\n\t\t\t\t<div className=\"d-flex\">\r\n\t\t\t\t\t<AvatarStatus size={60} type=\"square\" src={record.attachment} name={record.fullname}/>\r\n\t\t\t\t</div>\r\n\t\t\t),\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'name')\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Student Code',\r\n\t\t\tdataIndex: 'code',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'code')\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Gender',\r\n\t\t\tdataIndex: 'sex',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'sex'\t)\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Date of Birth',\r\n\t\t\tdataIndex: 'dob',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'dob')\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Home City',\r\n\t\t\tdataIndex: 'homecity',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'homecity')\t\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Address',\r\n\t\t\tdataIndex: 'address',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'address')\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Phone',\r\n\t\t\tdataIndex: 'phone',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'phone')\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Email',\r\n\t\t\tdataIndex: 'email',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'email')\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Class',\r\n\t\t\tdataIndex: 'class_id',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'classid')\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Username',\r\n\t\t\tdataIndex: 'username',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'username')\r\n\t\t},\r\n\t];\r\n\r\n    const rowSelection = {\r\n\t\tonChange: (key, rows) => {\r\n\t\t\tsetSelectedRows(rows)\r\n\t\t\tsetSelectedRowKeys(key)\r\n\t\t}\r\n\t};\r\n\r\n    // Render component - unchanged except for button margin fix\r\n    return (\r\n        <>\r\n            <div className=\"mb-3\">\r\n                <Card>\r\n                    <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n                        <h3 className=\"mb-0 mr-5\">Export Students</h3>\r\n                        <Flex justifyContent='flex-start'>   \r\n                            <Select \r\n                                defaultValue=\"xlsx\"\r\n                                style={{ width: 200 }}\r\n                                value={fileType}\r\n                                onChange={(value) => {\r\n                                    setFileType(value);\r\n                                }}\r\n                                placeholder=\"Select file type\"\r\n                            >\r\n                                <Option value=\"xlsx\">Excel (.xlsx)</Option>\r\n                                <Option value=\"csv\">CSV (.csv)</Option>\r\n                            </Select>\r\n                            <Button \r\n                                onClick={handleExport}\r\n                                type=\"primary\" \r\n                                loading={loading}\r\n                                style={{ marginLeft: 16 }}\r\n                                disabled={list.length === 0}\r\n                            >\r\n                                {selectedRows.length > 0 \r\n                                    ? `Export Selected (${selectedRows.length})` \r\n                                    : 'Export All'}\r\n                            </Button>\r\n                        </Flex>\r\n                    </Flex>\r\n                </Card>\r\n            </div>\r\n            <Card>\t\r\n                <div className=\"table-responsive\">\r\n                    <Table \r\n                        columns={tableColumns} \r\n                        dataSource={Array.isArray(list) ? list : []} \r\n                        rowKey='id' \r\n                        loading={loading}\r\n                        rowSelection={{\r\n                            selectedRowKeys,\r\n                            type: 'checkbox',\r\n                            ...rowSelection\r\n                        }}\r\n                    />\r\n                </div>\r\n            </Card>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ExportStudent;"],"sourceRoot":""}